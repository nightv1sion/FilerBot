// <auto-generated />
using System;
using Filer.Storage.Shared.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Filer.Storage.Shared.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241110191917_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Filer.Storage.Shared.Entities.DirectoryObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentDirectoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_directory_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("path");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_directories");

                    b.HasIndex("ParentDirectoryId")
                        .HasDatabaseName("ix_directories_parent_directory_id");

                    b.ToTable("directories", (string)null);
                });

            modelBuilder.Entity("Filer.Storage.Shared.Entities.FileObject", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Extension")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("extension");

                    b.Property<DateTimeOffset?>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentDirectoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_directory_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("path");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.HasIndex("ParentDirectoryId")
                        .HasDatabaseName("ix_files_parent_directory_id");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("Filer.Storage.Shared.Entities.DirectoryObject", b =>
                {
                    b.HasOne("Filer.Storage.Shared.Entities.DirectoryObject", "ParentDirectory")
                        .WithMany("SubDirectories")
                        .HasForeignKey("ParentDirectoryId")
                        .HasConstraintName("fk_directories_directories_parent_directory_id");

                    b.Navigation("ParentDirectory");
                });

            modelBuilder.Entity("Filer.Storage.Shared.Entities.FileObject", b =>
                {
                    b.HasOne("Filer.Storage.Shared.Entities.DirectoryObject", "ParentDirectory")
                        .WithMany("Files")
                        .HasForeignKey("ParentDirectoryId")
                        .HasConstraintName("fk_files_directories_parent_directory_id");

                    b.Navigation("ParentDirectory");
                });

            modelBuilder.Entity("Filer.Storage.Shared.Entities.DirectoryObject", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("SubDirectories");
                });
#pragma warning restore 612, 618
        }
    }
}
